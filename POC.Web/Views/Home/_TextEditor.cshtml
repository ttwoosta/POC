
@using POC_Web.Models

@model POC_Web.ViewModel.ConversionXmlViewModel

<script>
	$(function () {
		function createDocSpec(collapse) {
		var model = '@Html.Raw(Json.Encode(Model.XmlElements))';
		var data = JSON.parse(model);
		var spec = {};
			spec['elements'] = {};

			for (var i = 0; i < data.length; i++) {
				spec.elements[data[i].Name] = {
					'hasText': function (jsElement) {
						if (jsElement.hasElements()) {
							return false;
						}
						else {
							return true;
						}
					},
					collapsed: function (jsElement) {
						if (collapse) {
							return true;
						}
						else {
							return false;
						}
					}

				}

			}
			return spec;
		}

		
		var xml = $("#XmlFile").val();
		var editor = document.getElementById("TextEditor");
		Xonomy.render(xml, editor, createDocSpec(true));
		
		$("#switch-on").dxSwitch({
			value: true,
			onValueChanged: function (data) {
				Xonomy.render(xml, editor, createDocSpec(data.value));
				
			}
		});

			$("#btnSaveXML").click(function () {
			var xmlharvest = Xonomy.harvest();
			var myData = {
				Xml_TypeId: $("#Xml_TypeId").val(),
				XmlFile: xmlharvest
			}
			$.ajax({
			  url: url + "/pocxml/" + $("#Xml_id").val(),
				type: "PUT",
				data: JSON.stringify(myData),
				crossDomain: true,
				contentType: "application/json",
				success: function(result) {
					  toastNotification("XML Updated Successful",'@ToastEnum.Success');
				  },
				error: function (result) {
					  toastNotification("Error",'@ToastEnum.Error');
				  }
			  });
		});

	})

</script>

@Html.AntiForgeryToken()
<div class="form-horizontal col-md-12">
	<div class="form-group">
		<label class="control-label col-md-2 text-primary">Collapse</label>
		<div class="col-md-4" id="switch-on"></div>
	</div>

	@Html.ValidationSummary(true)
	@Html.HiddenFor(model => model.Xml_id)
	@Html.HiddenFor(model => model.XmlFile)

	<div class="form-group">
		@Html.LabelFor(model => model.Xml_TypeId, "XML TYPE", new { @class = "control-label col-md-2 text-primary" })
		<div class="col-md-4">
			@Html.TextBoxFor(model => model.Xml_TypeId, new { @class = "form-control" })
			@Html.ValidationMessageFor(model => model.Xml_TypeId)
		</div>
	</div>
	<div class="form-group">
		<div id="TextEditor" class="textEditor">
		</div>
	</div>
	<div class="form-group">
		<div class="col-md-offset-2 col-md-10">
			<input type="button" id="btnSaveXML" value="Save" class="btn btn-primary" />
		</div>
	</div>
</div>



